#include "plugin.hpp"
#include "widgets/PressablePot.hpp"
#include "widgets/PressableEncoder.hpp"
#include <componentlibrary.hpp>

struct PressableWidgetsTest : Module {
    enum ParamId {
        POT_PARAM,
        ENCODER_PARAM,
        PARAMS_LEN
    };
    enum InputId {
        INPUTS_LEN
    };
    enum OutputId {
        POT_OUTPUT,
        ENCODER_OUTPUT,
        OUTPUTS_LEN
    };
    enum LightId {
        POT_PRESS_LIGHT,
        ENCODER_PRESS_LIGHT,
        LIGHTS_LEN
    };

    PressableWidgetsTest() {
        config(PARAMS_LEN, INPUTS_LEN, OUTPUTS_LEN, LIGHTS_LEN);
        
        // Configure pot parameter (0.0 to 1.0, default 0.5)
        configParam(POT_PARAM, 0.0f, 1.0f, 0.5f, "Pressable Pot");
        
        // Configure encoder parameter (infinite range)
        configParam(ENCODER_PARAM, -INFINITY, INFINITY, 0.0f, "Pressable Encoder");
        getParamQuantity(ENCODER_PARAM)->snapEnabled = true;
        
        // Configure outputs
        configOutput(POT_OUTPUT, "Pot Value");
        configOutput(ENCODER_OUTPUT, "Encoder Steps");
        
        // Configure lights
        configLight(POT_PRESS_LIGHT, "Pot Press Indicator");
        configLight(ENCODER_PRESS_LIGHT, "Encoder Press Indicator");
    }

    void process(const ProcessArgs& args) override {
        // Output pot value (0.0 to 1.0 -> 0V to 10V)
        float potValue = params[POT_PARAM].getValue();
        outputs[POT_OUTPUT].setVoltage(potValue * 10.0f);
        
        // Output encoder steps (-1 to +1 -> -5V to +5V)
        float encoderValue = params[ENCODER_PARAM].getValue();
        outputs[ENCODER_OUTPUT].setVoltage(clamp(encoderValue, -1.0f, 1.0f) * 5.0f);
        
        // Note: Press lights are controlled by the widget instances
    }
};

// Custom widgets that extend our pressable widgets with light control
struct TestPressablePot : PressablePot {
    PressableWidgetsTest* module = nullptr;
    
    TestPressablePot() : PressablePot() {}
    
    void onPress() override {
        if (module) {
            module->lights[PressableWidgetsTest::POT_PRESS_LIGHT].setBrightness(1.0f);
        }
    }
    
    void onRelease() override {
        if (module) {
            module->lights[PressableWidgetsTest::POT_PRESS_LIGHT].setBrightness(0.0f);
        }
    }
};

struct TestPressableEncoder : PressableEncoder {
    PressableWidgetsTest* module = nullptr;
    
    TestPressableEncoder() : PressableEncoder() {}
    
    void onPress() override {
        if (module) {
            module->lights[PressableWidgetsTest::ENCODER_PRESS_LIGHT].setBrightness(1.0f);
        }
    }
    
    void onRelease() override {
        if (module) {
            module->lights[PressableWidgetsTest::ENCODER_PRESS_LIGHT].setBrightness(0.0f);
        }
    }
    
    void onStep(int stepDelta) override {
        // Flash the light briefly on encoder steps
        if (module && stepDelta != 0) {
            module->lights[PressableWidgetsTest::ENCODER_PRESS_LIGHT].setBrightness(0.5f);
        }
    }
};

struct PressableWidgetsTestWidget : ModuleWidget {
    PressableWidgetsTestWidget(PressableWidgetsTest* module) {
        setModule(module);
        setPanel(createPanel(asset::plugin(pluginInstance, "res/TestModule.svg")));
        
        // Add pressable pot
        TestPressablePot* pot = createParam<TestPressablePot>(mm2px(Vec(15, 30)), module, PressableWidgetsTest::POT_PARAM);
        pot->module = module;
        addParam(pot);
        
        // Add pressable encoder  
        TestPressableEncoder* encoder = createParam<TestPressableEncoder>(mm2px(Vec(15, 60)), module, PressableWidgetsTest::ENCODER_PARAM);
        encoder->module = module;
        addParam(encoder);
        
        // Add output ports
        addOutput(createOutputCentered<PJ301MPort>(mm2px(Vec(35, 30)), module, PressableWidgetsTest::POT_OUTPUT));
        addOutput(createOutputCentered<PJ301MPort>(mm2px(Vec(35, 60)), module, PressableWidgetsTest::ENCODER_OUTPUT));
        
        // Add press indicator lights
        addChild(createLightCentered<MediumLight<RedLight>>(mm2px(Vec(10, 25)), module, PressableWidgetsTest::POT_PRESS_LIGHT));
        addChild(createLightCentered<MediumLight<GreenLight>>(mm2px(Vec(10, 55)), module, PressableWidgetsTest::ENCODER_PRESS_LIGHT));
    }
};

Model* modelPressableWidgetsTest = createModel<PressableWidgetsTest, PressableWidgetsTestWidget>("PressableWidgetsTest");